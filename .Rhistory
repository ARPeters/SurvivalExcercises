length(Int1)<-length(ptProcessAnderson$survt)
for(i in 1:length(ptProcessAnderson$tr)){
Int1[i]<-ifelse(ptProcessAnderson$tr[i]<15, ptProcessAnderson$sex[i]*1, 0)
}
Int2<-list()
length(Int2)<-length(ptProcessAnderson$survt)
for(i in 1:length(ptProcessAnderson$tr)){
Int2[i]<-ifelse(ptProcessAnderson$tr[i]>=15, ptProcessAnderson$sex[i]*1, 0)
}
head(ptProcessAnderson)
ptProcessAnderson<-cbind(ptProcessAnderson, as.integer(unlist(Int1)), as.integer(unlist(Int2)))
colnames(ptProcessAnderson)<-c("subject", "survt", "status", "sex", "logWBC", "rx","r", "tr", "dir", "yir", "Int1", "Int2")
poissonAndersos5<-glm(yir ~ I(as.factor(r)) + logWBC + rx + Int1 + Int2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessAnderson)
getwd()
dsAnderson<-read.csv("./Andrew/dsAnderson.csv")
colnames(dsAnderson)<-c("subject", "survt", "status", "sex", "logWBC", "rx")
AndersonPh<-coxph(Surv(survt, status==1)~sex+logWBC+rx, data=dsAnderson, ties="breslow")
cox.zph(AndersonPh, transform="rank")
eventTimes <- unique(dsAnderson$survt[dsAnderson$status==1])
eventTimes <- eventTimes[order(eventTimes)]
require(plyr)
createPTable <- function(d){
dNew <- d
for(i in 1:length(eventTimes)){
dNew[i,] <- d
dNew[i,"r"] <- i
dNew[i,"tr"] <- eventTimes[i]
dNew[i,"dir"] <- ifelse(i==1,min(d$survt,eventTimes[i]),min(d$survt,eventTimes[i]) - eventTimes[i-1])
dNew[i,"yir"] <- 0
if(d$survt <= eventTimes[i]) {
if(d$status %in% 1) dNew[i,"yir"] <- 1
break
}
}
return(dNew)
}
ptProcessAnderson <- ddply(.data=dsAnderson,.variables=.(subject),.fun = createPTable)
Int1<-list()
length(Int1)<-length(ptProcessAnderson$survt)
for(i in 1:length(ptProcessAnderson$tr)){
Int1[i]<-ifelse(ptProcessAnderson$tr[i]<15, ptProcessAnderson$sex[i]*1, 0)
}
Int2<-list()
length(Int2)<-length(ptProcessAnderson$survt)
for(i in 1:length(ptProcessAnderson$tr)){
Int2[i]<-ifelse(ptProcessAnderson$tr[i]>=15, ptProcessAnderson$sex[i]*1, 0)
}
head(ptProcessAnderson)
ptProcessAnderson<-cbind(ptProcessAnderson, as.integer(unlist(Int1)), as.integer(unlist(Int2)))
colnames(ptProcessAnderson)<-c("subject", "survt", "status", "sex", "logWBC", "rx","r", "tr", "dir", "yir", "Int1", "Int2")
poissonAndersos5<-glm(yir ~ I(as.factor(r)) + logWBC + rx + Int1 + Int2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessAnderson)
poissonAnderson8<-glm(yir ~ I(as.factor(r)) + sex + logWBC + rx + sex:tr + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessAnderson)
summary(poissonAnderson8)
#
poissonAnderson9<-glm(yir ~ I(as.factor(r)) + logWBC + rx + strata(sex) + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessAnderson)
dsChemo<-read.csv("./Andrew/dsChemo.csv")
colnames(dsChemo)<-c("subject", "rx", "status", "survt")
scurveChemo<-survfit(Surv(survt, status==1)~rx, data=dsChemo)
summary(scurveChemo)
plot(scurveChemo)
ChemoPh<-coxph(Surv(survt, status==1)~rx, data=dsChemo, ties="breslow")
cox.zph(ChemoPh, transform="rank")
eventTimes <- unique(dsChemo$survt[dsChemo$status==1])
eventTimes <- eventTimes[order(eventTimes)]
createPTable <- function(d){
dNew <- d
for(i in 1:length(eventTimes)){
dNew[i,] <- d
dNew[i,"r"] <- i
dNew[i,"tr"] <- eventTimes[i]
dNew[i,"dir"] <- ifelse(i==1,min(d$survt,eventTimes[i]),min(d$survt,eventTimes[i]) - eventTimes[i-1])
dNew[i,"yir"] <- 0
if(d$survt <= eventTimes[i]) {
if(d$status %in% 1) dNew[i,"yir"] <- 1
break
}
}
return(dNew)
}
ptProcessChemo <- ddply(.data=dsChemo,.variables=.(subject),.fun = createPTable)
head(ptProcessChemo)
# Tx1<-list()
# length(Tx1)<-length(ptProcessChemo$yir)
#
ptProcessChemo$Time1 <- ifelse(ptProcessChemo$tr<250, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time2 <- ifelse(250<=ptProcessChemo$tr & ptProcessChemo$tr<500, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time3 <- ifelse(ptProcessChemo$tr>=500, ptProcessChemo$rx*1, 0)
head(ptProcessChemo)
poissonChemo3<-glm(yir ~ I(as.factor(r)) + Time1 + Time2 + Time3 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessChemo)
summary(poissonChemo3)
1/0.089
1/.545
library(survival)
library(foreign)
rm(list=ls(all=TRUE))
################################
#CHAPTER 6: Test
################################
#File Layout
#  Column 1 = Rx (1=chemotherapy, 2=chemotherapy and radiation)
#  Column 2 = status (0=censored, 1=died)
#  Column 3 = survival time (days)
#Read Anderson dataset
dsChemo <- read.table("http://statweb.stanford.edu/~olshen/hrp262spring01/spring01Assignments/chemo.txt", skip = 17)
names(dsChemo)<-c("Rx", "Status", "SurvTime")
#Test dsChemo
#KM plots for each treatment group
kmfit1 <- survfit(Surv(SurvTime, Status==1)~Rx, data=dsChemo)
summary(kmfit1)
plot(kmfit1)
#Test 2
ChemoPh<-coxph(Surv(SurvTime, Status==1)~Rx, data=dsChemo, ties="breslow")
summary(ChemoPh)
#Test 6
#start at page 646 of text as a reference
#Chemo.cp=survSplit(dsChemo,cut=dsChemo$SurvTime[dsChemo$Status==1], end="SurvTime", event="Status", start="start", id="id")
Chemo.cp250 <- survSplit(dsChemo, cut=250, end="SurvTime", event="Status", start="start", id="id")
Chemo.cp250=Chemo.cp250[order(Chemo.cp250$id, Chemo.cp250$start,])]
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 +  Time2, data=Chemo.cp250)
summary(ChemoPh2)
Y250
View(Chemo.cp250)
library(survival)
library(foreign)
setwd("~/GitHub")
###########################################################################
#KK Chapter 6: Practice Questions
###########################################################################
#anderson.dat
#Survival times in weeks (in remission) of 42 leukemia patients in
#clinical trial to compare treatment with placebo.  Data from Freireich et al.,
#"The effect of 6-mercaptopurine on the duration of steroid-induced remissions
#in acute leukemia," Blook 21, 699-716, 1963.
#Column 1 = survival time (weeks)
#Column 2 = status (0=censored, 1=relapse)
#Column 3 = sex (1=male, 0=female)
#Column 4 = log WBC
#Column 5 = Rx (1=placebo, 0=treatment)
dsAnderson<-read.csv("./Andrew/dsAnderson.csv")
colnames(dsAnderson)<-c("subject", "survt", "status", "sex", "logWBC", "rx")
AndersonPh<-coxph(Surv(survt, status==1)~sex+logWBC+rx, data=dsAnderson, ties="breslow")
cox.zph(AndersonPh, transform="rank")
# 1) Which of the variables in the model fitted above are time-independent
#    and which are time-dependent?
#    The probability of the sex variable having a constant effect on the hazard
#    is below 0.05; this suggest that it's schoenfield residuals have a correlation with time that is unlikely to be the
#   result of random chance.
#2) Based on this printout, is the PH assumption satisfied for the
#   model being fit? Explain briefly.
#   The predictions made by the model do not seem to have a significant correlation with time (p(PH GLOBAL)p=0.2393). This p-value is
#   not statistically significant as a whole, but is elevated, likely due to the influence of the sex variable.
#3) Suppose you want to use an extended Cox model to assess
#   the PH assumption for all three variables in the above model.
#   State the general form of an extended Cox model that will
#   allow for this assessment.
#   h(t, X(t))= h-null(t)exp(B1(sex)+B2(logWBC)+B3(rx)+epsilon1(sex)g1(t)+epsilon1(sex)g1(t)+epsilon2(logWBC)g2(t)+epsilon3(rx)g3(t))
#   gx(t) represents a function of time
#4) Suppose you wish to assess the PH assumption for the Sex
#   variable using a heaviside function approach designed to
#   yield a constant hazard ratio for less than 15 weeks of followup
#   and a constant hazard ratio for 15 weeks or more of followup.
#   State two equivalent alternative extended Cox models that
#   will carry out this approach, one model containing one heaviside
#   function and the other model containing two heaviside
#   functions.
#   h(t, X(t))= h-null(t)exp(B2(logWBC)+B3(rx)+epsilon1(sex)g1(t)+epsilon2(sex)g2(t)
#   or
#   h(t, X(t))= h-null(t)exp(B1(sex)+B2(logWBC)+B3(rx)+epsilon1(sex)g1(t)
#5)
eventTimes <- unique(dsAnderson$survt[dsAnderson$status==1])
eventTimes <- eventTimes[order(eventTimes)]
require(plyr)
createPTable <- function(d){
dNew <- d
for(i in 1:length(eventTimes)){
dNew[i,] <- d
dNew[i,"r"] <- i
dNew[i,"tr"] <- eventTimes[i]
dNew[i,"dir"] <- ifelse(i==1,min(d$survt,eventTimes[i]),min(d$survt,eventTimes[i]) - eventTimes[i-1])
dNew[i,"yir"] <- 0
if(d$survt <= eventTimes[i]) {
if(d$status %in% 1) dNew[i,"yir"] <- 1
break
}
}
return(dNew)
}
ptProcessAnderson <- ddply(.data=dsAnderson,.variables=.(subject),.fun = createPTable)
Int1<-list()
length(Int1)<-length(ptProcessAnderson$survt)
for(i in 1:length(ptProcessAnderson$tr)){
Int1[i]<-ifelse(ptProcessAnderson$tr[i]<15, ptProcessAnderson$sex[i]*1, 0)
}
Int2<-list()
length(Int2)<-length(ptProcessAnderson$survt)
for(i in 1:length(ptProcessAnderson$tr)){
Int2[i]<-ifelse(ptProcessAnderson$tr[i]>=15, ptProcessAnderson$sex[i]*1, 0)
}
head(ptProcessAnderson)
ptProcessAnderson<-cbind(ptProcessAnderson, as.integer(unlist(Int1)), as.integer(unlist(Int2)))
colnames(ptProcessAnderson)<-c("subject", "survt", "status", "sex", "logWBC", "rx","r", "tr", "dir", "yir", "Int1", "Int2")
poissonAndersos5<-glm(yir ~ I(as.factor(r)) + logWBC + rx + Int1 + Int2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessAnderson)
#   Using the above computer results, carry out a test of hypothesis,
#   estimate the hazard ratio, and obtain 95% confidence
#   interval for the treatment effect adjusted for log WBC and
#   the time-dependent Sex variables. What conclusions do you
#   draw about the treatment effect?
#   The treatment variable, rx, has a significant effect on the hazard rate, p<0.004.
#   The hazard ratio associated with treatment is estimated to be 3.822, but has  a wide confidence interval, 1.533 to 9.526.
#   The placebo group, rx=1, has a significantly higher hazard rate, but our estimate of the exact ratio is not very exact.
#6) We now consider an alternative approach to controlling for
#   Sex using an extended Cox model. We define an interaction
#   term between sex and time that allows for diverging survival
#   curves over time.
#   For the situation just described, write down the extended Cox
#   model, which contains Rx, log WBC, and Sex as main effects
#   plus the product term sex ? time.
#   h(t, X(t))= h-null(t)exp(B1(sex)+B2(logWBC)+B3(rx)+epsilon1(sex*t)
#7) Using the model described in question 6, express the hazard
#   ratio for the effect of Sex adjusted for Rx and log WBC at 8
#   and 16 weeks.
#   At t=8 weeks:  hr(sex)= exp(B1(sex)+8*epsilon(sex))
#   At t=16 weeks: hr(sex)= exp(B1(sex)+16*epsilon(sex))
#8)
poissonAnderson8<-glm(yir ~ I(as.factor(r)) + sex + logWBC + rx + sex:tr + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessAnderson)
summary(poissonAnderson8)
#coxphAnderson8<-coxph(Surv(ptProcessAnderson$tr, ptProcessAnderson$yir)~sex + logWBC + rx + sex*tr, data=ptProcessAnderson)
#   Based on the above results, describe the hazard ratio estimate
#   for the treatment effect adjusted for the other variables in the
#   model, and summarize the results of the significance test and
#   interval estimate for this hazard ratio. How do these results
#   compare with the results previously obtained when a heaviside
#   function approach was used? What does this comparison
#   suggest about the drawbacks of using an extended Cox model
#   to adjust for variables not satisfying the PH assumption?
#   Based on the slightly different model above (continuous time function, rather than a heaviside function)
#   the treatment variable rx has a hazard ratio of 2.984, p<0.022, with a confidence interval of 1.467 to 7.626.
#   While the overall conclusion remains the same, the exact estimate, p-value, and confidence interval are all slightly
#   different.
#   This suggests that the selection of a time function can change the characteristics of the model; care must be taken to select
#   a time function that is appropriate to the study.
#9)
poissonAnderson9<-glm(yir ~ I(as.factor(r)) + logWBC + rx + strata(sex) + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessAnderson)
#coxAnderson9<-coxph(Surv(ptProcessAnderson$tr, ptProcessAnderson$yir)~logWBC + rx + strata(sex), data=ptProcessAnderson)
#   The following gives an edited printout of computer results
#   using a stratified Cox procedure that stratifies on the Sex
#   variable but keeps Rx and log WBC in the model.Compare the
#   results of the above printout with previously
#   provided results regarding the hazard ratio for the effect of
#   Rx. Is there any way to determine which set of results is more
#   appropriate? Explain.
#   This model gives yet another set of values regarding the treatment effect (B=0.93, Hratio=2.537, p<-.048, conf.int=(1.006, 6.396))
#   and shows similar divergence for the logWBC variable as well.
#
#   We can select the best model using model goodness-of-fit statistics, or by graphing the observed survival curves and estimated
#   survival curves to select which model fits the data the best. Or by looking at AUC?
###########################################################################
#KK Chapter 6: Test Questions
###########################################################################
#  http://statweb.stanford.edu/~olshen/hrp262spring01/spring01Assignments/chemo.txt
#  Survival times in days from a clinical trial on gastric carcinoma,
#  involving 90 patients randomized to either chemotherapy alone or to a
#  combination of chemotherapy and radiation.  Data from Stablein et al.,
#  "The analysis of survival data with nonproportional hazard functions,"
#  Controlled Clinical Trials 2, 149-159, 1981.
#  Column 1 = Rx (1=chemotherapy, 2=chemotherapy and radiation)
#  Column 2 = status (0=censored, 1=died)
#  Column 3 = survival time (days)
dsChemo<-read.csv("./Andrew/dsChemo.csv")
colnames(dsChemo)<-c("subject", "rx", "status", "survt")
#1) A plot of the log-log Kaplan-Meier curves for each
#   treatment group is shown below. Based on this plot, what
#   would you conclude about the PH assumption regarding
#   the treatment group variable? Explain.
#   scurveChemo<-survfit(Surv(survt, status==1)~rx, data=dsChemo)
#   summary(scurveChemo)
scurveChemo<-survfit(Surv(survt, status==1)~rx, data=dsChemo)
summary(scurveChemo)
plot(scurveChemo)
#   The ph assumption appears to be violated; the survival functions for the two treatment groups appear to diverge
#   early on, and then reconverge around the t=800 days, when there are not many individuals left in either risk set.
#2) The following is an edited printout of computer results
#   obtained when fitting the PH model containing only the
#   treatment group variable. Based on these results, what
#   would you conclude about the PH assumption regarding
#   the treatment group variable? Explain.
ChemoPh<-coxph(Surv(survt, status==1)~rx, data=dsChemo, ties="breslow")
cox.zph(ChemoPh, transform="rank")
#   The results here differ slightly from the textbook, because this dataset contains 95 subjects (even though the page
#   I copied it from says that it is a dataset of 90 subjects).
#   Still, the PH assumption seems to have been violated. The schoenfield residuals of the treatment variable show
#   a significant correlation with time, that is unlikely to be the result of chance, p(PH)=0.00105
#3)
eventTimes <- unique(dsChemo$survt[dsChemo$status==1])
eventTimes <- eventTimes[order(eventTimes)]
createPTable <- function(d){
dNew <- d
for(i in 1:length(eventTimes)){
dNew[i,] <- d
dNew[i,"r"] <- i
dNew[i,"tr"] <- eventTimes[i]
dNew[i,"dir"] <- ifelse(i==1,min(d$survt,eventTimes[i]),min(d$survt,eventTimes[i]) - eventTimes[i-1])
dNew[i,"yir"] <- 0
if(d$survt <= eventTimes[i]) {
if(d$status %in% 1) dNew[i,"yir"] <- 1
break
}
}
return(dNew)
}
ptProcessChemo <- ddply(.data=dsChemo,.variables=.(subject),.fun = createPTable)
head(ptProcessChemo)
# Tx1<-list()
# length(Tx1)<-length(ptProcessChemo$yir)
#
# for(i in 1:length(ptProcessChemo$rx)){
#   Tx1[i]<-ifelse(ptProcessChemo$tr[i]<250, ptProcessChemo$rx[i]*1, 0)
# }
#
# Tx2<-list()
# length(Tx2)<-length(ptProcessChemo$yir)
#
#
# for(i in 1:length(ptProcessChemo$rx)){
#   Tx2[i]<-ifelse(250<=ptProcessChemo$tr[i] & ptProcessChemo$tr[i]<500, ptProcessChemo$rx[i]*1, 0)
# }
#
# Tx3<-list()
# length(Tx3)<-length(ptProcessChemo$yir)
#
#
# for(i in 1:length(ptProcessChemo$rx)){
#   Tx3[i]<-ifelse(ptProcessChemo$tr[i]>=500, ptProcessChemo$rx[i]*1, 0)
# }
#
# ptProcessChemo<-cbind(ptProcessChemo, as.numeric(unlist(Tx1)),  as.numeric(unlist(Tx2)),  as.numeric(unlist(Tx3)))
# colnames(ptProcessChemo)<-c("subject", "rx", "status", "survt", "r", "tr", "dir", "yir","Time1", "Time2", "Time3")
ptProcessChemo$Time1 <- ifelse(ptProcessChemo$tr<250, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time2 <- ifelse(250<=ptProcessChemo$tr & ptProcessChemo$tr<500, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time3 <- ifelse(ptProcessChemo$tr>=500, ptProcessChemo$rx*1, 0)
head(ptProcessChemo)
View(ptProcessChemo)
unique(ptProcessChemo$rx)
unique(ptProcessChemo$Time1)
ptProcessChemo$Time2 <- ifelse(250<=ptProcessChemo$tr, ptProcessChemo$rx*1, 0)
poissonChemo3<-glm(yir ~ I(as.factor(r)) + Time1 + Time2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessChemo)
summary(poissonChemo3)
summary(ChemoPh4)
summary(ChemoPh2)
Chemo.cp250$start
?survSplit
View(ptProcessChemo)
View(ptProcessChemo)
View(ptProcessChemo)
ptProcessChemo[ptProcessChemo$subject %in% 24,]
ptProcessChemo[ptProcessChemo$subject %in% 24,]
ptProcessChemo$Time1 <- ifelse(ptProcessChemo$tr<=250, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time2 <- ifelse(250<ptProcessChemo$tr, ptProcessChemo$rx*1, 0)
poissonChemo3<-glm(yir ~ I(as.factor(r)) + Time1 + Time2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessChemo)
summary(poissonChemo3)
ptProcessChemo$Time1 <- ifelse(ptProcessChemo$tr<250, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time2 <- ifelse(250<=ptProcessChemo$tr, ptProcessChemo$rx*1, 0)
poissonChemo3<-glm(yir ~ I(as.factor(r)) + Time1 + Time2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessChemo)
summary(poissonChemo3)
Chemo.cp250 <- survSplit(dsChemo, cut=250.1, end="SurvTime", event="Status", start="start", id="id")
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
Chemo.cp250 <- survSplit(dsChemo, cut=251, end="SurvTime", event="Status", start="start", id="id")
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
eventTimes
Chemo.cp250 <- survSplit(dsChemo, cut=254, end="SurvTime", event="Status", start="start", id="id")
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
Chemo.cp250 <- survSplit(dsChemo, cut=251, end="SurvTime", event="Status", start="start", id="id")
#Chemo.cp250=Chemo.cp250[order(Chemo.cp250$id, Chemo.cp250$start,])]
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
library(survival)
library(foreign)
#rm(list=ls(all=TRUE))
################################
#CHAPTER 6: Test
################################
#File Layout
#  Column 1 = Rx (1=chemotherapy, 2=chemotherapy and radiation)
#  Column 2 = status (0=censored, 1=died)
#  Column 3 = survival time (days)
#Read Anderson dataset
dsChemo <- read.table("http://statweb.stanford.edu/~olshen/hrp262spring01/spring01Assignments/chemo.txt", skip = 17)
names(dsChemo)<-c("Rx", "Status", "SurvTime")
#Test dsChemo
#KM plots for each treatment group
kmfit1 <- survfit(Surv(SurvTime, Status==1)~Rx, data=dsChemo)
summary(kmfit1)
plot(kmfit1)
#Test 2
ChemoPh<-coxph(Surv(SurvTime, Status==1)~Rx, data=dsChemo, ties="breslow")
summary(ChemoPh)
#Test 6
#start at page 646 of text as a reference
#Chemo.cp=survSplit(dsChemo,cut=dsChemo$SurvTime[dsChemo$Status==1], end="SurvTime", event="Status", start="start", id="id")
Chemo.cp250 <- survSplit(dsChemo, cut=250.1, end="SurvTime", event="Status", start="start", id="id")
#Chemo.cp250=Chemo.cp250[order(Chemo.cp250$id, Chemo.cp250$start,])]
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
Chemo.cp250 <- survSplit(dsChemo, cut=251, end="SurvTime", event="Status", start="start", id="id")
#Chemo.cp250=Chemo.cp250[order(Chemo.cp250$id, Chemo.cp250$start,])]
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
Chemo.cp250 <- survSplit(dsChemo, cut=254, end="SurvTime", event="Status", start="start", id="id")
#Chemo.cp250=Chemo.cp250[order(Chemo.cp250$id, Chemo.cp250$start,])]
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
ptProcessChemo$Time1 <- ifelse(ptProcessChemo$tr<=254, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time2 <- ifelse(254<=ptProcessChemo$tr, ptProcessChemo$rx*1, 0)
poissonChemo3<-glm(yir ~ I(as.factor(r)) + Time1 + Time2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessChemo)
summary(poissonChemo3)
ptProcessChemo$Time2 <- ifelse(254<ptProcessChemo$tr, ptProcessChemo$rx*1, 0)
poissonChemo3<-glm(yir ~ I(as.factor(r)) + Time1 + Time2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessChemo)
summary(poissonChemo3)
Chemo.cp250 <- survSplit(dsChemo, cut=251, end="SurvTime", event="Status", start="start", id="id")
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
ptProcessChemo$Time1 <- ifelse(ptProcessChemo$tr<=251, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time2 <- ifelse(251<ptProcessChemo$tr, ptProcessChemo$rx*1, 0)
poissonChemo3<-glm(yir ~ I(as.factor(r)) + Time1 + Time2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessChemo)
summary(poissonChemo3)
summary(ChemoPh2)
Chemo.cp250 <- survSplit(dsChemo, cut=250.1, end="SurvTime", event="Status", start="start", id="id")
View(Chemo.cp250)
Chemo.cp250 <- survSplit(dsChemo, cut=249.99, end="SurvTime", event="Status", start="start", id="id")
#Chemo.cp250=Chemo.cp250[order(Chemo.cp250$id, Chemo.cp250$start,])]
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
Chemo.cp250 <- survSplit(dsChemo, cut=249, end="SurvTime", event="Status", start="start", id="id")
#Chemo.cp250=Chemo.cp250[order(Chemo.cp250$id, Chemo.cp250$start,])]
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<250)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=250)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
cutOff
cutOff <- 249
Chemo.cp250 <- survSplit(dsChemo, cut=cutOff, end="SurvTime", event="Status", start="start", id="id")
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<=cutOff)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>cutOff)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
cutOff <- 249
Chemo.cp250 <- survSplit(dsChemo, cut=cutOff, end="SurvTime", event="Status", start="start", id="id")
#Chemo.cp250=Chemo.cp250[order(Chemo.cp250$id, Chemo.cp250$start,])]
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<=cutOff)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>cutOff)
View(Chemo.cp250)
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<cutOff)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=cutOff)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
ptProcessChemo$Time1 <- ifelse(ptProcessChemo$tr<250, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time2 <- ifelse(250<ptProcessChemo$tr, ptProcessChemo$rx*1, 0)
poissonChemo3<-glm(yir ~ I(as.factor(r)) + Time1 + Time2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessChemo)
summary(poissonChemo3)
summary(ChemoPh2)
ptProcessChemo$Time1 <- ifelse(ptProcessChemo$tr<250, ptProcessChemo$rx*1, 0)
ptProcessChemo$Time2 <- ifelse(250<=ptProcessChemo$tr, ptProcessChemo$rx*1, 0)
poissonChemo3<-glm(yir ~ I(as.factor(r)) + Time1 + Time2 + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessChemo)
summary(poissonChemo3)
summary(ChemoPh2)
cutOff <- 249.9
#Note that survSplit uses the cutoff to end one time period and ALSO begin the next period
#So, in order for this model to agree with our count process model,
#need to consider end points using <= and not < logic.
#In the example below, we'd like the endpoint to be < 250, so for survSplit we split the data using <= 249.
Chemo.cp250 <- survSplit(dsChemo, cut=cutOff, end="SurvTime", event="Status", start="start", id="id")
#Chemo.cp250=Chemo.cp250[order(Chemo.cp250$id, Chemo.cp250$start,])]
Chemo.cp250$Time1 <- Chemo.cp250$Rx*(Chemo.cp250$start<cutOff)
Chemo.cp250$Time2 <- Chemo.cp250$Rx*(Chemo.cp250$start>=cutOff)
Y250=Surv(Chemo.cp250$start, Chemo.cp250$SurvTime, Chemo.cp250$Status)
ChemoPh2<-coxph(Y250~Time1 + Time2, data=Chemo.cp250)
summary(ChemoPh2)
