dsNew<-ds
head(dsNew$Child_First_Name4610)
dsNew$Child_First_Name4610
head(dsNew$Child_First_Name_4610)
dsNew$CHILD_GNAME<-dsNew$Child_first_name_4610
colnames(ds)
dsNew$CHILD_LNAME<-dsNew$Child_Last_Name_6756
head(dsNew$CHILD_GNAME)
dsNew$CHILD_GNAME<-dsNew$Child_First_Name_4610
head(dsNew$CHILD_GNAME)
head(dsNew$CHILD_LNAME)
dsNew$IDOB<-dsNew$CHild_DOB
head(dsNew$IDOB)
head(dsNew$CHild_DOB)
dsNew$MDOB<-dsNew$dob
head(dsNew$MDOB)
head(dsNew$dob)
colnames(dsNew)
rm(list = ls(all.names = TRUE))
library(foreign)
setwd("S:/CCAN/CCANResEval/MIECHV/RedCap/Chomp/DataSnapshots/C1/Activity/2015-04-10")
ds<-read.csv("childrenfirstdata.csv")
setwd("C:/Users/APETERS4/Documents/GitHub/SurvivalExercises/SurvivalExercises/SurvivalExercises/Andrew")
dsNew$CHILD_GNAME<-dsNew$Child_First_Name_4610
dsNew$CHILD_LNAME<-dsNew$Child_Last_Name_6756
rm(list = ls(all.names = TRUE))
library(foreign)
setwd("S:/CCAN/CCANResEval/MIECHV/RedCap/Chomp/DataSnapshots/C1/Activity/2015-04-10")
ds<-read.csv("childrenfirstdata.csv")
setwd("C:/Users/APETERS4/Documents/GitHub/SurvivalExercises/SurvivalExercises/SurvivalExercises/Andrew")
dsNew<-ds
dsNew$CHILD_GNAME<-dsNew$Child_First_Name_4610
dsNew$CHILD_LNAME<-dsNew$Child_Last_Name_6756
setwd("~/GitHub/SurvivalExercises/SurvivalExercises/SurvivalExercises/Andrew")
rm(list = ls(all.names = TRUE))
library(foreign)
setwd("S:/CCAN/CCANResEval/MIECHV/RedCap/Chomp/DataSnapshots/C1/Activity/2015-04-10")
ds<-read.csv("childrenfirstdata.csv")
setwd("C:/Users/APETERS4/Documents/GitHub/SurvivalExercises/SurvivalExercises/SurvivalExercises/Andrew")
CHILD_GNAME<-dsNew$Child_First_Name_4610
CHILD_LNAME<-dsNew$Child_Last_Name_6756
rm(list = ls(all.names = TRUE))
library(foreign)
setwd("S:/CCAN/CCANResEval/MIECHV/RedCap/Chomp/DataSnapshots/C1/Activity/2015-04-10")
ds<-read.csv("childrenfirstdata.csv")
setwd("C:/Users/APETERS4/Documents/GitHub/SurvivalExercises/SurvivalExercises/SurvivalExercises/Andrew")
CHILD_GNAME<-ds$Child_First_Name_4610
CHILD_LNAME<-ds$Child_Last_Name_6756
colnames(ds)
head(ds$CHild_DOB)
IDOB<-ds$CHild_DOB
head(Infant_Gender_4634)
head(ds$Infant_Gender_4634)
table(ds$Infant_Gender_4634)
INFANT_SEX<ds$Infant_Gender_4634<-ifelse(ds$Infant_Gender_4634=="FEMALE", "F", elseif(Infant_Gender_4634=="MALE", "M", "U"))
INFANT_SEX<ds$Infant_Gender_4634<-ifelse(ds$Infant_Gender_4634=="FEMALE", "F", ifelsee(Infant_Gender_4634=="MALE", "M", "U"))
INFANT_SEX<ds$Infant_Gender_4634<-ifelse(ds$Infant_Gender_4634=="FEMALE", "F", ifelse(Infant_Gender_4634=="MALE", "M", "U"))
INFANT_SEX<ds$Infant_Gender_4634<-ifelse(ds$Infant_Gender_4634=="FEMALE", "F", ifelse(ds$Infant_Gender_4634=="MALE", "M", "U"))
INFANT_SEX<-ds$Infant_Gender_4634<-ifelse(ds$Infant_Gender_4634=="FEMALE", "F", ifelse(ds$Infant_Gender_4634=="MALE", "M", "U"))
table(INFANT_SEX)
INFANT_SEX<-ds$Infant_Gender_4634<-ifelse(ds$Infant_Gender_4634=="Female", "F", ifelse(ds$Infant_Gender_4634=="Male", "M", "U"))
table(ds$Infant_Gender_4634)
table(INFANT_SEX)
table(ds$Infant_Gender_4634)
rm(list = ls(all.names = TRUE))
library(foreign)
setwd("S:/CCAN/CCANResEval/MIECHV/RedCap/Chomp/DataSnapshots/C1/Activity/2015-04-10")
ds<-read.csv("childrenfirstdata.csv")
setwd("C:/Users/APETERS4/Documents/GitHub/SurvivalExercises/SurvivalExercises/SurvivalExercises/Andrew")
CHILD_GNAME<-ds$Child_First_Name_4610
CHILD_LNAME<-ds$Child_Last_Name_6756
#CHild_DOB > IDOB; MM/DD/YYYY
IDOB<-ds$CHild_DOB
#Infant_Gender_4634 > INFANT_SEX; MFU
INFANT_SEX<-ifelse(ds$Infant_Gender_4634=="Female", "F", ifelse(ds$Infant_Gender_4634=="Male", "M", "U"))
table(ds$Infant_Gender_4634)
table(INFANT_SEX)
colnames(ds)
MOTHER_GNAME<-ds$clientfirst
MOTHER_LNAME<-ds$clientlast
head(ds$dob)
head(ds$Client_DOB)
sum(is.na(ds$dob))
head(ds)
sum(is.na(ds$Client_DOB))
levels(ds$Client_DOB))
levels(ds$Client_DOB)
levels(ds$dob)
levels(ds$Client_DOB)
MDOB<-ds$dob
colnames(ds)
head(PCG_racecat)
head(ds$PCG_racecat)
head(ds$PCG_racec)
table(ds$PCG_racecat)
table(ds$PCG_racec)
table(ds$marital)
MARRIED_NOW<-ifelse(ds$marital=="Married" | ds$marital=="Separated", "Y", ifelse(ds$marital=="Never married" | ds$marital=="Widowed", "N", ""))
table(MARRIED_NOW)
table(ds$marital)
3353+190
3354+190
MARRIED_NOW<-ifelse(ds$marital=="Married" | ds$marital=="Separated", "Y", ifelse(ds$marital=="Divorced" |ds$marital=="Never married" | ds$marital=="Widowed", "N", ""))
table(ds$marital)
table(MARRIED_NOW)
384+11991+29
colnames(ds)
head(ds$PCG_SSN)
?subsplit()
?substring()
x<-"abcdefgh"
substring(x, 2,3,3)
library(plyr)
?seq()
insert_str(x, c("-", "-"), c(4,7))
x<-"abcdefghi"
split_str_by_index <- function(target, index) {
index <- sort(index)
substr(rep(target, length(index) + 1),
start = c(1, index),
stop = c(index -1, nchar(target)))
}
#Taken from https://stat.ethz.ch/pipermail/r-help/2006-March/101023.html
interleave <- function(v1,v2)
{
ord1 <- 2*(1:length(v1))-1
ord2 <- 2*(1:length(v2))
c(v1,v2)[order(c(ord1,ord2))]
}
insert_str <- function(target, insert, index) {
insert <- insert[order(index)]
index <- sort(index)
paste(interleave(split_str_by_index(target, index), insert), collapse="")
}
insert_str(x, c("-", "-"), c(4,7))
x<-"abcdefghi"
split_str_by_index <- function(target, index) {
index <- sort(index)
substr(rep(target, length(index) + 1),
start = c(1, index),
stop = c(index -1, nchar(target)))
}
#Taken from https://stat.ethz.ch/pipermail/r-help/2006-March/101023.html
interleave <- function(v1,v2)
{
ord1 <- 2*(1:length(v1))-1
ord2 <- 2*(1:length(v2))
c(v1,v2)[order(c(ord1,ord2))]
}
insert_str <- function(target, insert, index) {
insert <- insert[order(index)]
index <- sort(index)
paste(interleave(split_str_by_index(target, index), insert), collapse="")
}
insert_str(x, c("-", "-"), c(4,6))
MSSN<-as.vector
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
MSSN[i]<-insert_str(ds$PCG_SSN[i], c("-", "-"), c(4,6))
}
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
MSSN[i]<-insert_str(as.string(ds$PCG_SSN[i]), c("-","-"), c(4,6))
}
str(ds$PCG_SSN)
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
MSSN[i]<-insert_str(as.char(ds$PCG_SSN[i]), c("-","-"), c(4,6))
}
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
MSSN[i]<-insert_str(to.string(ds$PCG_SSN[i]), c("-","-"), c(4,6))
}
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
MSSN[i]<-insert_str(toString(ds$PCG_SSN[i]), c("-","-"), c(4,6))
}
x<-c(1:9)
insert_str(x, c("-", "-"), c(4,6))
x<-c(1:9)
insert_str(x, c("-", "-"), c(4,6))
x<-toString(c(1:9))
insert_str(x, c("-", "-"), c(4,6))
x<-toString(c(1:9))
x
x<-toString(c(123456789))
x<-c(123456789)
insert_str(x, c("-", "-"), c(4,6))
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
MSSN[i]<-insert_str(ds$PCG_SSN[i], c("-","-"), c(4,6))
}
insert_str(ds$PCG_SSN[1], c("-","-"), c(4,6))
ds$PCG_SSN[1]
rm(list = ls(all.names = TRUE))
library(foreign)
library(plyr)
setwd("S:/CCAN/CCANResEval/MIECHV/RedCap/Chomp/DataSnapshots/C1/Activity/2015-04-10")
ds<-read.csv("childrenfirstdata.csv")
setwd("C:/Users/APETERS4/Documents/GitHub/SurvivalExercises/SurvivalExercises/SurvivalExercises/Andrew")
CHILD_GNAME<-ds$Child_First_Name_4610
CHILD_LNAME<-ds$Child_Last_Name_6756
#CHild_DOB > IDOB; MM/DD/YYYY
IDOB<-ds$CHild_DOB
#Infant_Gender_4634 > INFANT_SEX; MFU
INFANT_SEX<-ifelse(ds$Infant_Gender_4634=="Female", "F", ifelse(ds$Infant_Gender_4634=="Male", "M", "U"))
table(ds$Infant_Gender_4634)
table(INFANT_SEX)
#Clientfirst>MOTHER_GNAME
MOTHER_GNAME<-ds$clientfirst
#Clientlast>MOTHER_LNAME
MOTHER_LNAME<-ds$clientlast
#dob > MODB
MDOB<-ds$dob
#MRACEBRT>...PCG_racecat and PCG_racec are apparently identical but it isn't clear how to turn cf format into VR format
colnames(ds)
table(ds$PCG_racecat)
table(ds$PCG_racec)
#marital>MARRIED_NOW; Y, N
#Married, Separated=Y
#Divorced, never married, widowed, = N
#"" = ""
MARRIED_NOW<-ifelse(ds$marital=="Married" | ds$marital=="Separated", "Y", ifelse(ds$marital=="Divorced" |ds$marital=="Never married" | ds$marital=="Widowed", "N", ""))
table(ds$marital)
table(MARRIED_NOW)
#PCG_SSN into MSSN; turn XXXXXXXXX into XXX-XX-XXXX
#http://stackoverflow.com/questions/13863599/insert-a-character-at-a-specific-location-in-a-string
split_str_by_index <- function(target, index) {
index <- sort(index)
substr(rep(target, length(index) + 1),
start = c(1, index),
stop = c(index -1, nchar(target)))
}
#Taken from https://stat.ethz.ch/pipermail/r-help/2006-March/101023.html
interleave <- function(v1,v2)
{
ord1 <- 2*(1:length(v1))-1
ord2 <- 2*(1:length(v2))
c(v1,v2)[order(c(ord1,ord2))]
}
insert_str <- function(target, insert, index) {
insert <- insert[order(index)]
index <- sort(index)
paste(interleave(split_str_by_index(target, index), insert), collapse="")
}
x<-c(123456789)
insert_str(x, c("-", "-"), c(4,6))
ds$PCG_SSN[1]
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
if ds$PCG_SSN[1]=NA next
MSSN[i]<-insert_str(ds$PCG_SSN[1], c("-","-"), c(4,6))
}
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=NA){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[1], c("-","-"), c(4,6))
}
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]==NA){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[1], c("-","-"), c(4,6))
}
table(ds$PCG_SSN)
head(ds$PCG_SSN)
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=="NA"){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[1], c("-","-"), c(4,6))
}
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN)==TRUE){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[1], c("-","-"), c(4,6))
}
warnings()
head(ds$PCG_SSN)
head(MSSN)
MSSN
MSSN<-as.vector
length(MSSN)<-length(ds$PCG_SSN)
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN)==TRUE){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[1], c("-","-"), c(4,6))
}
head(MSSN)
x<-c("123456789", "1011121314")
insert_str(x[1], c("-", "-"), c(4,6))
insert_str(x[2], c("-", "-"), c(4,6))
x<-c("123456789", "101112131")
insert_str(x[2], c("-", "-"), c(4,6))
MSSN<-as.vector
length(MSSN)<-length(ds$PCG_SSN)
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN[i])==TRUE){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[1], c("-","-"), c(4,6))
}
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN[i])==TRUE){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[i], c("-","-"), c(4,6))
}
ds$PCG_SSN[1]
ds$PCG_SSN[2]
insert_str(ds$PCG_SSN[2], c("-","-"), c(4,6))
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN[i])==TRUE){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[i], c("-","-"), c(4,6))
}
MSSN
MSSN<-lapply(ds$PCG_SSN, insert_str(ds$PCG_SSN, c("-","_"), c(4,6)))
attach(ds)
MSSN<-as.vector
for(i in 1:length(ds$PCG_SSN)){
if (PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN[i])==TRUE){
next
}
MSSN[i]<-insert_str(PCG_SSN[i], c("-","-"), c(4,6))
}
head(PCG_SSN)
PCG_SSN[1:100]
insert_str(PCG_SSN[3], c("-","-"), c(4,6))
MSSN[3]<-insert_str(PCG_SSN[3], c("-","-"), c(4,6))
MSSN
MSSN<-as.vector()
MSSN<-vector()
MSSN
attach(ds)
for(i in 1:length(ds$PCG_SSN)){
if (PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN[i])==TRUE){
next
}
MSSN[i]<-insert_str(PCG_SSN[i], c("-","-"), c(4,6))
}
PCG_SSN[1:100]
MSSN[1:100]
MSSN[1:10]
PCG_SSN[1:10]
MSSN<-vector()
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN[i])==TRUE){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[i], c("-","-"), c(4,6))
}
MSSN[1:10]
PCG_SSN[1:10]
detach(ds)
MSSN<-vector()
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN[i])==TRUE){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[i], c("-","-"), c(4,6))
}
MSSN[1:10]
PCG_SSN[1:10]
colnames(ds)
MAIL_ADDR1<-ds$address1
MAIL_ADDR2<-ds$address2
MAIL_CITY<-ds$city
MAIL_ZIP<-ds$zip
RES_ADDR1<-ds$address1
RES_ADDR2<-ds$address2
RES_CITY<-ds$city
RES_ZIP<-ds$zip
table(PCG_ethnic)
table(ethnicity_c)
table(PCG_racecat)
table(racec)
sum(is.na(PCG_racecat))
table(PCG_ethnic)
METHNIC_NO<-ifelse(PCG_ethnic=="Hispanic", "N", "Y")
table(METHNIC_NO)
table(PCG_ethnic)
METHNIC1<-ifelse(ds$racec)
METHNIC1<-ifelse(ds$racec=="White", "Y", "N")
tabel(METHNIC1)
table(METHNIC1)
METHNIC2<-ifelse(ds$racec=="African American", "Y", "N")
table(METHNIC2)
METHNIC2<-ifelse(ds$racec=="American Indian or Alaska Native", "Y", "N")
METHNIC2<-ifelse(ds$racec=="African American", "Y", "N")
METHNIC3<-ifelse(ds$racec=="American Indian or Alaska Native", "Y", "N")
table(METHNIC3)
table(ds$racec)
table(ds$PCG_racecat)
racec
METHNIC1<-ifelse(ds$PCG_racecat=="White", "Y", "N")
table(METHNIC1)
table(ds$PCG_racecat)
METHNIC2<-ifelse(ds$PCG_racecat=="Black or African American", "Y", "N")
table(METHNIC2)
table(ds$PCG_racecat)
METHNIC3<-ifelse(ds$PCG_racecat=="American Indian or Alaska Native", "Y", "N")
table(METHNIC3)
colnames(ds)
table(ds$PCG_ethnic)
table(ds$ethnicity_c)
table(ds$PCG_racecat)
dsNew<-cbind(MOTHER_LNAME, MOTHER_GNAME, MSSN, MDOB, MRACE1, MRACE2, MRACE3, METHNIC_NO, RES_ADDR1, RES_ADDR2, RES_CITY, RES_ZIP, MARRIED_NOW, CHILD_LNAME, CHILD_GNAME, INFANT_SEX, IDOB)
rm(list = ls(all.names = TRUE))
library(foreign)
library(plyr)
setwd("S:/CCAN/CCANResEval/MIECHV/RedCap/Chomp/DataSnapshots/C1/Activity/2015-04-10")
ds<-read.csv("childrenfirstdata.csv")
setwd("C:/Users/APETERS4/Documents/GitHub/SurvivalExercises/SurvivalExercises/SurvivalExercises/Andrew")
CHILD_GNAME<-ds$Child_First_Name_4610
CHILD_LNAME<-ds$Child_Last_Name_6756
#CHild_DOB > IDOB; MM/DD/YYYY
IDOB<-ds$CHild_DOB
#Infant_Gender_4634 > INFANT_SEX; MFU
INFANT_SEX<-ifelse(ds$Infant_Gender_4634=="Female", "F", ifelse(ds$Infant_Gender_4634=="Male", "M", "U"))
table(ds$Infant_Gender_4634)
table(INFANT_SEX)
#Clientfirst>MOTHER_GNAME
MOTHER_GNAME<-ds$clientfirst
#Clientlast>MOTHER_LNAME
MOTHER_LNAME<-ds$clientlast
#dob > MODB
MDOB<-ds$dob
#MRACEBRT>...PCG_racecat and PCG_racec are apparently identical but it isn't clear how to turn cf format into VR format
colnames(ds)
table(ds$PCG_racecat)
table(ds$PCG_racec)
#marital>MARRIED_NOW; Y, N
#Married, Separated=Y
#Divorced, never married, widowed, = N
#"" = ""
MARRIED_NOW<-ifelse(ds$marital=="Married" | ds$marital=="Separated", "Y", ifelse(ds$marital=="Divorced" |ds$marital=="Never married" | ds$marital=="Widowed", "N", ""))
table(ds$marital)
table(MARRIED_NOW)
#PCG_SSN into MSSN; turn XXXXXXXXX into XXX-XX-XXXX
#http://stackoverflow.com/questions/13863599/insert-a-character-at-a-specific-location-in-a-string
split_str_by_index <- function(target, index) {
index <- sort(index)
substr(rep(target, length(index) + 1),
start = c(1, index),
stop = c(index -1, nchar(target)))
}
#Taken from https://stat.ethz.ch/pipermail/r-help/2006-March/101023.html
interleave <- function(v1,v2)
{
ord1 <- 2*(1:length(v1))-1
ord2 <- 2*(1:length(v2))
c(v1,v2)[order(c(ord1,ord2))]
}
insert_str <- function(target, insert, index) {
insert <- insert[order(index)]
index <- sort(index)
paste(interleave(split_str_by_index(target, index), insert), collapse="")
}
MSSN<-vector()
for(i in 1:length(ds$PCG_SSN)){
if (ds$PCG_SSN[i]=="NA" | is.na(ds$PCG_SSN[i])==TRUE){
next
}
MSSN[i]<-insert_str(ds$PCG_SSN[i], c("-","-"), c(4,6))
}
MSSN[1:10]
PCG_SSN[1:10]
#address1>MAIL_ADDR1
#address2>MAIL_ADDR2
#city>MAIL_CITY
#zip>MAIL_ZIP
RES_ADDR1<-ds$address1
RES_ADDR2<-ds$address2
RES_CITY<-ds$city
RES_ZIP<-ds$zip
#address1>MAIL_ADDR1
#address2>MAIL_ADDR2
#city>MAIL_CITY
#zip>MAIL_ZIP
MAIL_ADDR1<-ds$address1
MAIL_ADDR2<-ds$address2
MAIL_CITY<-ds$city
MAIL_ZIP<-ds$zip
#PCG_ethnic>METHNIC_NO; N=Not Mexican/Chicana; H=Yes, U=unknown
#Formatting of VR data is ambiguous; Y=NO, Not spanish/hispanic/latina?
#BE SURE TO DOUBLE CHECK THIS ONE
table(ds$PCG_ethnic)
table(ds$ethnicity_c)
METHNIC_NO<-ifelse(ds$PCG_ethnic=="Hispanic", "N", "Y")
table(METHNIC_NO)
table(ds$racec)
table(ds$PCG_racecat)
#PCG_racecat>MRACE1; Y=White, N= not white
MRACE1<-ifelse(ds$PCG_racecat=="White", "Y", "N")
table(MRACE1)
#PCG_racecat>MRACE2; Y=Black/African American, N
MRACE2<-ifelse(ds$PCG_racecat=="Black or African American", "Y", "N")
table(MRACE2)
#PCG_racecat>MRACE3; Y=American Indian/Alaskan Native, N
MRACE3<-ifelse(ds$PCG_racecat=="American Indian or Alaska Native", "Y", "N")
table(MRACE3)
dsNew<-cbind(MOTHER_LNAME, MOTHER_GNAME, MSSN, MDOB, MRACE1, MRACE2, MRACE3, METHNIC_NO, RES_ADDR1, RES_ADDR2, RES_CITY, RES_ZIP, MARRIED_NOW, CHILD_LNAME, CHILD_GNAME, INFANT_SEX, IDOB)
